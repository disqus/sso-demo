import { useState } from 'react';
import { DiscussionEmbed } from 'disqus-react';
import axios from 'axios';

const DisqusSSO = () => {
    const [loggedIn, setLoggedInStatus] = useState(false);
    const [loginPayload, setLoginPayload] = useState('');
    const [loginPublicKey, setLoginPublicKey] = useState('');
    const [loginTestField, setLoginTestField] = useState('');
    const [remoteAuthS3, setRemoteAuthS3] = useState('');

    const handleLogin = async (userId) => {
        const userData = userId === 1 ? {
            id:'369093571',
            username:'email subscriber',
            email:'daniel.matteson+email@gmail.com',
            avatar:'https://i.imgur.com/AYgoB04.jpg', // optional - link to that user's avatar. Note: URL must be less than 200 characters and must end in a valid image extension (e.g., .jpg, .png)
            url:'https://advrider.com/index.php?members/disqustest.422614/', // optional - link to user's website
            profile_url: "http://example.com/profileUrlTemplate/email%20subscriber", // optional - link to the user's profile that exists on the site's own domain. This is only used if the SSO integration is linking out to user profiles that exist on the site's own domain, rather than the Disqus profile.
        } : {
            id:'123456869',
            username: 'Nope Nope Nope',
            email: 'person7@example.com',
            avatar:'https://i.imgur.com/AYgoB04.jpg',
            url: 'example7.com',
            profile_url:'https://example.com/providedProfileUrl-123456869'
        };

        const apiUrl = window.location.hostname === 'disqus.github.io'
          ? 'https://sso-serverless.ctang-402.workers.dev'
          : 'http://localhost:8787';

        axios({
            url: `${apiUrl}/sso`,
            method: 'POST',
            headers: {
                'Content-Type': 'application/json'
            },
            data: { user: userData }
        })
            .then(response => response.data.sso)
            .then(sso => {
                setLoginPayload(`remoteAuthS3 payload: ${sso.auth}`);
                setLoginPublicKey(`Public Key: ${sso.pubKey}`);
                setLoginTestField(`Test Field: ${sso.test}`);
                setLoggedInStatus(true);
                setRemoteAuthS3(sso.auth);
            })
            .catch(err => console.error(err))
    }

    const handleLogout = () => {
        setRemoteAuthS3('e30= c1ad77866d19a308f133d18bb12a3e1f5d536a3b 1495142696');
        setLoggedInStatus(false);
    }

    return (
        <>
            <div id='login-logout-buttons'>
                <button
                    onClick={() => handleLogin(1)}
                >
                    Login as User 1
                </button>
                <button
                    onClick={() => handleLogin()}
                >
                    Login as User 2
                </button>
                <button
                    onClick={handleLogout}
                >
                    Log out user with empty SSO auth
                </button>
            </div>
            {loggedIn ? 
            <div id='login-payload'>
                <p>
                    {loginPayload}
                </p>
                <p>
                    {loginPublicKey}
                </p>
                <p>
                    {loginTestField}
                </p> 
            </div> : null}
            <DiscussionEmbed
                shortname='ssoglitch'
                config={
                    {
                        url: 'https://disqus.github.io/sso-demo/',
                        identifier: '123',
                        title: 'Disqus SSO quick start',
                        apiKey: 'IrsWOMVmYfDfTq7IJ5fXMA2Ix99nB30EF7cP77SDgIrGyoQna1wXwU42wx17xRjN', // Your Disqus API key that can be generated or referenced at https://disqus.com/api/applications/
                        remoteAuthS3: remoteAuthS3, // Generated by your server (see https://help.disqus.com/customer/en/articles/1717160-integrating-single-sign-on for more details)
                        sso: { // this `sso` object is optional.  It is only needed if you want the SSO login button to appear next to the Disqus login options
                            name:   "SampleNews",
                            button:  "http://example.com/images/samplenews.gif",
                            icon:     "http://example.com/favicon.png",
                            url:        "http://example.com/login/",
                            logout:  "http://example.com/logout/",
                            width:   "800",
                            height:  "400"
                        },
                    }
                }
            />
        </>

    )
}

export default DisqusSSO;
